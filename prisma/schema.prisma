// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
    
}

model Example {
    id        String   @id @default(cuid())
    testString String 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// Todo Models
enum Urgency {
    urgent 
    important
    trivial
}
model Todo {
    id Int @id @default(autoincrement())
    content String 
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    completed Boolean @default(false)
    createdAt DateTime @default(now())
    deadline DateTime?
    urgency Urgency?
    listBoard ListBoard? @relation(fields: [listBoardId], references: [id])
    listBoardId Int?
    dateRecord DateRecord? @relation(fields: [dateRecordId], references: [id])
    dateRecordId Int?

    @@index([listBoardId, dateRecordId])
}

model ListBoard {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    todos Todo[]
    description String?
}
// Todo Models



// Date Models
model DateRecord {
    id Int @id @default(autoincrement())
    date DateTime @unique
    day String
    todos Todo[]
    revHistory DayRevs[]
    user User @relation(fields: [userId], references: [id])
    userId String
}

model DayRevs {
    id Int @id @default(autoincrement())
    revenue Int
    purpose String
    date DateTime?
    dateRecord DateRecord @relation(fields: [dateRecordId], references: [id])
    dateRecordId Int
    description String?

    @@index([dateRecordId])
}
//


model User {
    id            String    @id @default(cuid())
    username      String?
    email         String   @unique
    password      String
    emailVerified DateTime?
    profileImage  String?
    listBoards    ListBoard[]
    todos         Todo[]
    dateRecords   DateRecord[]
    // accounts      Account[]
    // sessions      Session[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime
//     @@unique([identifier, token])
// }
